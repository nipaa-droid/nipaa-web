generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model OsuDroidUser {
    id Int @id @default(sequence())

    name     String   @unique
    oldNames String[]

    password String

    session String? @unique @db.Uuid()

    email String? @unique
    image String?

    createdAt DateTime @default(now())
    lastSeen  DateTime @default(now())

    playing String? @db.Char(32)

    scores OsuDroidScore[]
    stats  OsuDroidStats[]
}

model OsuDroidStats {
    id   Int      @id @default(sequence())
    mode GameMode

    playCount Int

    userId Int
    user   OsuDroidUser @relation(fields: [userId], references: [id])
}

model OsuDroidScore {
    id Int @id @default(sequence())

    mode GameMode

    mapHash String @db.Char(32)

    replay Bytes?

    pp Float

    // TODO MAYBE THIS COLUMN IS UNNECESSARY WE COULD ANALYZE THE REPLAY BUFFER INSTEAD TO CHECK FOR THE SCORE
    score Int

    h300  Int
    h100  Int
    h50   Int
    h0    Int
    hGeki Int
    hKatu Int

    maxCombo Int

    // TODO THIS MAYBE UNECESSARY ON DB
    grade ScoreGrade

    mods String

    date DateTime @default(now())

    status SubmissionStatus

    playerId Int
    player   OsuDroidUser @relation(fields: [playerId], references: [id])
}

enum SubmissionStatus {
    // Used when a submission fails.
    FAILED

    // Used when a score is submitted on the servers,
    //  but not the current best play on that map for the user who made that score.
    SUBMITTED

    // Used when a play is submitted successfully, and is the best play from that user.
    BEST

    // Used when a play is submitted successfully, and is the best play from that user.
    //  although it should not reward any pp.
    APPROVED
}

enum ScoreGrade {
    XH
    X
    SH
    S
    A
    B
    C
    D
    F
}

enum GameMode {
    std
    taiko
    mania
    catch
}
