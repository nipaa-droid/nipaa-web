generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")

}

model Account {
    id                Int     @id @default(sequence())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            Int       @id @default(sequence())
    name          String    @unique
    oldNames      String[]
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    lastSeen  DateTime @default(now())

    playing String?

    scores OsuDroidScore[]
    stats  OsuDroidStats[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Session {
    id           Int      @id @default(sequence())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OsuDroidStats {
    id   Int      @id @default(sequence())
    mode GameMode

    playCount Int

    userId Int
    user   User @relation(fields: [userId], references: [id])
}

model OsuDroidScore {
    id Int @id @default(sequence())

    mode GameMode

    mapHash String @db.Char(32)

    replay String?

    pp Float

    // TODO MAYBE THIS COLUMN IS UNNECESSARY WE COULD ANALYZE THE REPLAY BUFFER INSTEAD TO CHECK FOR THE SCORE
    score Int

    h300  Int
    h100  Int
    h50   Int
    h0    Int
    hGeki Int
    hKatu Int

    maxCombo Int
    grade    ScoreGrade

    mods String

    fc   Boolean
    date DateTime @default(now())

    status SubmissionStatus

    playerId Int
    player   User @relation(fields: [playerId], references: [id])
}

enum SubmissionStatus {
    // Used when a submission fails.
    FAILED

    // Used when a score is submitted on the servers,
    //  but not the current best play on that map for the user who made that score.
    SUBMITTED

    // Used when a play is submitted successfully, and is the best play from that user.
    BEST

    // Used when a play is submitted successfully, and is the best play from that user.
    //  although it should not reward any pp.
    APPROVED
}

enum ScoreGrade {
    SS
    S
    A
    B
    C
    D
    F
}

enum GameMode {
    std
    taiko
    mania
    catch
}
