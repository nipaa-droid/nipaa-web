generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model OsuDroidUser {
    id Int @id @default(autoincrement())

    name String @unique

    password String

    email String  @unique @db.Char(36)
    image String?

    createdAt DateTime @default(now())
    lastSeen  DateTime @default(now())

    playing String? @db.Char(32)

    scores   OsuDroidScore[]
    stats    OsuDroidStats[]
    sessions UserSession[]
}

model UserSession {
    id       String       @id @default(uuid())
    creation DateTime     @default(now())
    expires  DateTime
    userId   Int
    user     OsuDroidUser @relation(fields: [userId], references: [id])
}

model OsuDroidStats {
    id   Int      @id @default(autoincrement())
    mode GameMode

    playCount Int

    userId Int
    user   OsuDroidUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OsuDroidScore {
    id Int @id @default(autoincrement())

    mode GameMode

    replay             Bytes?
    replayOnceVerified Boolean @default(false)

    pp Float

    score Int

    h300  Int
    h100  Int
    h50   Int
    h0    Int
    hGeki Int
    hKatu Int

    maxCombo Int

    mods String

    date DateTime @default(now())

    status SubmissionStatus

    playerId Int
    player   OsuDroidUser @relation(fields: [playerId], references: [id], onDelete: Cascade)

    beatmapDatabaseId Int
    beatmap           OsuBeatmap @relation(fields: [beatmapDatabaseId], references: [databaseId], onDelete: Cascade)
}

model OsuBeatmap {
    databaseId Int             @id @unique @default(autoincrement())
    hash       String          @unique @db.Char(32)
    scores     OsuDroidScore[]
}

enum SubmissionStatus {
    // Used when a submission fails.
    FAILED

    // Used when a score is submitted on the servers,
    //  but not the current best play on that map for the user who made that score.
    SUBMITTED

    // Used when a play is submitted successfully, and is the best play from that user.
    BEST

    // Used when a play is submitted successfully, and is the best play from that user.
    //  although it should not reward any pp.
    APPROVED
}

enum GameMode {
    std
    taiko
    mania
    catch
}
